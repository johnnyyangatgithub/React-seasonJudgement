{"ast":null,"code":"var _jsxFileName = \"/Users/johnny/season/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); //THIS IS THE ONLY TIME THAT WE DO ASSIGNMENT TO this.state\n\n    this.state = {\n      lat: null,\n      errMessage: ''\n    };\n  }\n\n  componentDidMount() {\n    //Geolocation API contain two callbacks, first of it is success function and second is error\n    window.navigator.geolocation.getCurrentPosition(position => {\n      this.setState({\n        lat: position.coords.latitude\n      });\n    }, err => {\n      this.setState({\n        errMessage: err.message\n      });\n    });\n  }\n\n  componentDidUpdate() {\n    console.log('My component was update to the screen');\n  }\n\n  render() {\n    if (this.state.errMessage && !this.state.lat) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Err: \", this.state.errMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 20\n      }, this);\n    }\n\n    if (this.state.lat && !this.state.errMessage) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Latitude: \", this.state.lat]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 41,\n  columnNumber: 17\n}, this), document.querySelector('#root'));","map":{"version":3,"sources":["/Users/johnny/season/src/index.js"],"names":["React","ReactDOM","App","Component","constructor","props","state","lat","errMessage","componentDidMount","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","message","componentDidUpdate","console","log","render","document","querySelector"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;;;AAGA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAC9BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEf;;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,GAAG,EAAE,IAAP;AAAaC,MAAAA,UAAU,EAAE;AAAzB,KAAb;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAEhB;AACAC,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CACIC,QAAQ,IAAI;AAAE,WAAKC,QAAL,CAAc;AAAER,QAAAA,GAAG,EAAEO,QAAQ,CAACE,MAAT,CAAgBC;AAAvB,OAAd;AAAmD,KADrE,EAEIC,GAAG,IAAI;AACH,WAAKH,QAAL,CAAc;AAAEP,QAAAA,UAAU,EAAEU,GAAG,CAACC;AAAlB,OAAd;AACH,KAJL;AAMH;;AAEDC,EAAAA,kBAAkB,GAAG;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKjB,KAAL,CAAWE,UAAX,IAAyB,CAAC,KAAKF,KAAL,CAAWC,GAAzC,EAA8C;AAC1C,0BAAO;AAAA,4BAAW,KAAKD,KAAL,CAAWE,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AAED,QAAI,KAAKF,KAAL,CAAWC,GAAX,IAAkB,CAAC,KAAKD,KAAL,CAAWE,UAAlC,EAA8C;AAC1C,0BAAO;AAAA,iCAAgB,KAAKF,KAAL,CAAWC,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AAED,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAEH;;AAjC6B;;AAoClCN,QAAQ,CAACsB,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAzB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        //THIS IS THE ONLY TIME THAT WE DO ASSIGNMENT TO this.state\n        this.state = { lat: null, errMessage: '' };\n    }\n\n    componentDidMount() {\n\n        //Geolocation API contain two callbacks, first of it is success function and second is error\n        window.navigator.geolocation.getCurrentPosition(\n            position => { this.setState({ lat: position.coords.latitude }); },\n            err => {\n                this.setState({ errMessage: err.message });\n            }\n        );\n    }\n\n    componentDidUpdate() {\n        console.log('My component was update to the screen');\n    }\n\n    render() {\n        if (this.state.errMessage && !this.state.lat) {\n            return <div>Err: {this.state.errMessage}</div>\n        }\n\n        if (this.state.lat && !this.state.errMessage) {\n            return <div>Latitude: {this.state.lat}</div>\n        }\n\n        return <div>Loading...</div>\n\n    }\n}\n\nReactDOM.render(<App />, document.querySelector('#root'));"]},"metadata":{},"sourceType":"module"}